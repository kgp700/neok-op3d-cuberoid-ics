#ifndef OMAP_VOUTDEF_H#define OMAP_VOUTDEF_H#include <plat/display.h>#define YUYV_BPP        2#define RGB565_BPP      2#define RGB24_BPP       3#define RGB32_BPP       4#define TILE_SIZE       32#define YUYV_VRFB_BPP   2#define RGB_VRFB_BPP    1#define MAX_CID		3#define MAC_VRFB_CTXS	4#ifdef CONFIG_ARCH_OMAP4#define MAX_VOUT_DEV	3#define MAX_OVLS	4#define MAX_DISPLAYS	4#else#define MAX_VOUT_DEV	2#define MAX_OVLS	3#define MAX_DISPLAYS	3#endif#define MAX_MANAGERS	3#define V4L2_CID_TI_DISPC_OVERLAY	(V4L2_CID_PRIVATE_BASE + 0)enum dss_rotation {	dss_rotation_0_degree	= 0,	dss_rotation_90_degree	= 1,	dss_rotation_180_degree	= 2,	dss_rotation_270_degree = 3,};struct vid_vrfb_dma {	int dev_id;	int dma_ch;	int req_status;	int tx_status;	wait_queue_head_t wait;};struct omapvideo_info {	int id;	int num_overlays;	struct omap_overlay *overlays[MAX_OVLS];};struct omap2video_device {	struct mutex  mtx;	int state;	struct v4l2_device v4l2_dev;	struct omap_vout_device *vouts[MAX_VOUT_DEV];	int num_displays;	struct omap_dss_device *displays[MAX_DISPLAYS];	int num_overlays;	struct omap_overlay *overlays[MAX_OVLS];	int num_managers;	struct omap_overlay_manager *managers[MAX_MANAGERS];};struct omap_vout_work {	struct omap_vout_device *vout;	struct work_struct work;	bool process;};struct omap_vout_device {	struct omapvideo_info vid_info;	struct video_device *vfd;	struct omap2video_device *vid_dev;	int vid;	int opened;	int buffer_allocated;		int buffer_size;		unsigned long buf_virt_addr[VIDEO_MAX_FRAME];	unsigned long buf_phy_addr[VIDEO_MAX_FRAME];		unsigned long buf_phy_uv_addr_alloced[VIDEO_MAX_FRAME];	unsigned long buf_phy_addr_alloced[VIDEO_MAX_FRAME];	unsigned long buf_phy_uv_addr[VIDEO_MAX_FRAME];	u8 *queued_buf_uv_addr[VIDEO_MAX_FRAME];	enum omap_color_mode dss_mode;	int mmap_count;	spinlock_t vbq_lock;			unsigned long field_count;		bool streaming;	struct v4l2_pix_format pix;	struct v4l2_rect crop;	struct v4l2_window win;	struct v4l2_framebuffer fbuf;	struct mutex lock;	struct v4l2_control control[MAX_CID];	enum dss_rotation rotation;	bool mirror;	int flicker_filter;	int bpp; 	int vrfb_bpp; 	struct vid_vrfb_dma vrfb_dma_tx;	unsigned int smsshado_phy_addr[MAC_VRFB_CTXS];	unsigned int smsshado_virt_addr[MAC_VRFB_CTXS];	struct vrfb vrfb_context[MAC_VRFB_CTXS];	bool vrfb_static_allocation;	unsigned int smsshado_size;	unsigned char pos;	int ps, vr_ps, line_length, first_int, field_id;	enum v4l2_memory memory;	struct videobuf_buffer *cur_frm, *next_frm;	struct list_head dma_queue;	u8 *queued_buf_addr[VIDEO_MAX_FRAME];	u32 cropped_offset[VIDEO_MAX_FRAME];	u32 cropped_uv_offset[VIDEO_MAX_FRAME];	s32 tv_field1_offset;	void *isr_handle;	struct omap_vout_device *vout;	enum v4l2_buf_type type;	struct videobuf_queue vbq;	int io_allowed;		bool wb_enabled;	bool buf_empty;	struct workqueue_struct *workqueue;};struct vout_platform_data {	void (*set_min_bus_tput)(struct device *dev, u8 agent_id,			unsigned long r);	void (*set_max_mpu_wakeup_lat)(struct device *dev, long t);	void (*set_cpu_freq)(unsigned long f);};#endif