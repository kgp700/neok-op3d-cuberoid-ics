#ifndef _LINUX_WAKELOCK_H#define _LINUX_WAKELOCK_H#include <linux/list.h>#include <linux/ktime.h>enum {	WAKE_LOCK_SUSPEND, 	WAKE_LOCK_IDLE,    	WAKE_LOCK_TYPE_COUNT};struct wake_lock {#ifdef CONFIG_HAS_WAKELOCK	struct list_head    link;	int                 flags;	const char         *name;	unsigned long       expires;#ifdef CONFIG_WAKELOCK_STAT	struct {		int             count;		int             expire_count;		int             wakeup_count;		ktime_t         total_time;		ktime_t         prevent_suspend_time;		ktime_t         max_time;		ktime_t         last_time;	} stat;#endif#endif};#ifdef CONFIG_HAS_WAKELOCKvoid wake_lock_init(struct wake_lock *lock, int type, const char *name);void wake_lock_destroy(struct wake_lock *lock);void wake_lock(struct wake_lock *lock);void wake_lock_timeout(struct wake_lock *lock, long timeout);void wake_unlock(struct wake_lock *lock);int wake_lock_active(struct wake_lock *lock);long has_wake_lock(int type);void abnormal_wake_unlock_call(int value);void get_abnormal_wake_unlock_call(void);int kill_abnormal_active_locks(int type);long find_abnormal_wake_lock(int type);#elsestatic inline void wake_lock_init(struct wake_lock *lock, int type,					const char *name) {}static inline void wake_lock_destroy(struct wake_lock *lock) {}static inline void wake_lock(struct wake_lock *lock) {}static inline void wake_lock_timeout(struct wake_lock *lock, long timeout) {}static inline void wake_unlock(struct wake_lock *lock) {}static inline int wake_lock_active(struct wake_lock *lock) { return 0; }static inline long has_wake_lock(int type) { return 0; }void abnormal_wake_unlock_call(int value) { return 0; }void get_abnormal_wake_unlock_call(void) { return 0; }int kill_abnormal_active_locks(int type) { return 0; }static inline long find_abnormal_wake_lock(int type) { return 0; }#endif#endif