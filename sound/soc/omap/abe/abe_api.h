#ifndef _ABE_API_H_#define _ABE_API_H_#include <linux/module.h>#include <linux/moduleparam.h>#include <linux/init.h>#include <linux/err.h>#include <linux/slab.h>struct omap_abe {	void __iomem *io_base;	u32 firmware_version_number;	u16 MultiFrame[PROCESSING_SLOTS][TASKS_IN_SLOT];	u32 compensated_mixer_gain;	u8  muted_gains_indicator[MAX_NBGAIN_CMEM];	u32 desired_gains_decibel[MAX_NBGAIN_CMEM];	u32 muted_gains_decibel[MAX_NBGAIN_CMEM];	u32 desired_gains_linear[MAX_NBGAIN_CMEM];	u32 desired_ramp_delay_ms[MAX_NBGAIN_CMEM];	struct mutex mutex;	u32 pdm_dl1_status;	u32 pdm_dl2_status;	u32 pdm_vib_status;	u32 irq_dbg_read_ptr;	u32 dbg_activity_log[D_DEBUG_HAL_TASK_sizeof];	u32 dbg_activity_log_write_pointer;	u32 dbg_mask;	u32 dbg_param;	u32 dbg_output;};int abe_reset_hal(void);int abe_load_fw_param(u32 *FW);int abe_reload_fw(void);int abe_load_fw(void);int abe_read_hardware_configuration(u32 *u, u32 *o,				abe_hw_config_init_t *hw);int abe_irq_processing(void);int abe_clear_irq(void);int abe_disable_irq(void);int abe_check_activity(void);int abe_wakeup(void);int abe_start_event_generator(void);int abe_stop_event_generator(void);int abe_select_main_port(u32 id);int abe_write_event_generator(u32 e);int abe_read_use_case_opp(u32 *u, u32 *o);int abe_set_opp_processing(u32 opp);int abe_set_ping_pong_buffer(u32 port, u32 n_bytes);int abe_read_next_ping_pong_buffer(u32 port, u32 *p, u32 *n);int abe_init_ping_pong_buffer(u32 id, u32 size_bytes, u32 n_buffers,				u32 *p);int abe_read_offset_from_ping_buffer(u32 id, u32 *n);int abe_plug_subroutine(u32 *id, abe_subroutine2 f, u32 n,			  u32 *params);int abe_set_sequence_time_accuracy(u32 fast, u32 slow);int abe_reset_port(u32 id);int abe_read_remaining_data(u32 port, u32 *n);int abe_disable_data_transfer(u32 id);int abe_enable_data_transfer(u32 id);int abe_set_dmic_filter(u32 d);int abe_connect_cbpr_dmareq_port(u32 id, abe_data_format_t *f, u32 d,				   abe_dma_t *returned_dma_t);int abe_connect_dmareq_ping_pong_port(u32 id, abe_data_format_t *f,					u32 d, u32 s,					abe_dma_t *returned_dma_t);int abe_connect_irq_ping_pong_port(u32 id, abe_data_format_t *f,				     u32 subroutine_id, u32 size,				     u32 *sink, u32 dsp_mcu_flag);int abe_connect_serial_port(u32 id, abe_data_format_t *f,			      u32 mcbsp_id);int abe_connect_slimbus_port(u32 id, abe_data_format_t *f,			       u32 sb_port1, u32 sb_port2);int abe_connect_tdm_port(u32 id, abe_data_format_t *f, u32 mcbsp_id);int abe_read_port_address(u32 port, abe_dma_t *dma2);int abe_write_equalizer(u32 id, abe_equ_t *param);int abe_write_asrc(u32 port, s32 dppm);int abe_write_aps(u32 id, abe_aps_t *param);int abe_write_gain(u32 id, s32 f_g, u32 ramp, u32 p);int abe_use_compensated_gain(u32 on_off);int abe_enable_gain(u32 id, u32 p);int abe_disable_gain(u32 id, u32 p);int abe_mute_gain(u32 id, u32 p);int abe_unmute_gain(u32 id, u32 p);int abe_write_mixer(u32 id, s32 f_g, u32 f_ramp, u32 p);int abe_read_gain(u32 id, u32 *f_g, u32 p);int abe_read_mixer(u32 id, u32 *f_g, u32 p);int abe_mono_mixer(u32 id, u32 on_off);int abe_set_router_configuration(u32 id, u32 k, u32 *param);int abe_select_data_source(u32 port_id, u32 smem_source);int abe_read_debug_trace(u32 *data, u32 *n);int abe_connect_debug_trace(abe_dma_t *dma2);int abe_set_debug_trace(abe_dbg_t debug);int abe_remote_debugger_interface(u32 n, u8 *p);int abe_enable_test_pattern(u32 smem_id, u32 on_off);int abe_init_mem(void __iomem *_io_base);void abe_add_subroutine(u32 *id, abe_subroutine2 f, u32 nparam, u32 *params);int abe_read_next_ping_pong_buffer(u32 port, u32 *p, u32 *n);extern u32 abe_irq_pingpong_player_id;u32 abe_check_port(unsigned int port);#endif