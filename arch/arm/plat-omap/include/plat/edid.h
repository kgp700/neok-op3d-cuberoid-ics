#ifndef _EDID_H_#define _EDID_H_#include <plat/display.h>#define HDMI_EDID_EX_DATABLOCK_TAG_MASK		0xE0#define HDMI_EDID_EX_DATABLOCK_LEN_MASK		0x1F#define HDMI_EDID_EX_SUPPORTS_AI_MASK      0x80#define EDID_TIMING_DESCRIPTOR_SIZE		0x12#define EDID_DESCRIPTOR_BLOCK0_ADDRESS		0x36#define EDID_DESCRIPTOR_BLOCK1_ADDRESS		0x80#define EDID_SIZE_BLOCK0_TIMING_DESCRIPTOR	4#define EDID_SIZE_BLOCK1_TIMING_DESCRIPTOR	4#define HDMI_EDID_DETAILED_TIMING_OFFSET	0x36#define HDMI_EDID_PIX_CLK_OFFSET		0#define HDMI_EDID_H_ACTIVE_OFFSET		2#define HDMI_EDID_H_BLANKING_OFFSET		3#define HDMI_EDID_V_ACTIVE_OFFSET		5#define HDMI_EDID_V_BLANKING_OFFSET		6#define HDMI_EDID_H_SYNC_OFFSET			8#define HDMI_EDID_H_SYNC_PW_OFFSET		9#define HDMI_EDID_V_SYNC_OFFSET			10#define HDMI_EDID_V_SYNC_PW_OFFSET		11#define HDMI_EDID_H_IMAGE_SIZE_OFFSET		12#define HDMI_EDID_V_IMAGE_SIZE_OFFSET		13#define HDMI_EDID_H_BORDER_OFFSET		15#define HDMI_EDID_V_BORDER_OFFSET		16#define HDMI_EDID_FLAGS_OFFSET			17#define HDMI_IEEE_REGISTRATION_ID           0x000c03#define HDMI_STATE_NOMONITOR	0 #define HDMI_STATE_CONNECTED	1 #define HDMI_STATE_ON		2 #define HDMI_EDID_MAX_LENGTH			512#define HDMI_EDID_MAX_DTDS			4#define HDMI_EDID_DTD_TAG_MONITOR_NAME		0xFC#define HDMI_EDID_DTD_TAG_MONITOR_SERIALNUM	0xFF#define HDMI_EDID_DTD_TAG_MONITOR_LIMITS	0xFD#define HDMI_EDID_DTD_TAG_STANDARD_TIMING_DATA	0xFA#define HDMI_EDID_DTD_TAG_COLOR_POINT_DATA	0xFB#define HDMI_EDID_DTD_TAG_ASCII_STRING		0xFE#define HDMI_IMG_FORMAT_MAX_LENGTH		20#define HDMI_VIDEO_NATIVE_DTDS_MASK		0x0f#define HDMI_AUDIO_FORMAT_MAX_LENGTH		10#define HDMI_AUDIO_BASIC_MASK      0x40#define HDMI_EDID_EX_VIDEO_NATIVE		0x80#define HDMI_EDID_EX_VIDEO_MASK			0x7F#define HDMI_EDID_EX_VIDEO_MAX			35#define HDMI_EDID_EX_VIDEO_640x480p_60Hz_4_3	1#define HDMI_EDID_EX_VIDEO_720x480p_60Hz_4_3	2#define HDMI_EDID_EX_VIDEO_720x480p_60Hz_16_9	3#define HDMI_EDID_EX_VIDEO_1280x720p_60Hz_16_9	4#define HDMI_EDID_EX_VIDEO_1920x1080i_60Hz_16_9	5#define HDMI_EDID_EX_VIDEO_720x480i_60Hz_4_3	6#define HDMI_EDID_EX_VIDEO_720x480i_60Hz_16_9	7#define HDMI_EDID_EX_VIDEO_720x240p_60Hz_4_3	8#define HDMI_EDID_EX_VIDEO_720x240p_60Hz_16_9	9#define HDMI_EDID_EX_VIDEO_2880x480i_60Hz_4_3	10#define HDMI_EDID_EX_VIDEO_2880x480i_60Hz_16_9	11#define HDMI_EDID_EX_VIDEO_2880x480p_60Hz_4_3	12#define HDMI_EDID_EX_VIDEO_2880x480p_60Hz_16_9	13#define HDMI_EDID_EX_VIDEO_1440x480p_60Hz_4_3	14#define HDMI_EDID_EX_VIDEO_1440x480p_60Hz_16_9	15#define HDMI_EDID_EX_VIDEO_1920x1080p_60Hz_16_9	16#define HDMI_EDID_EX_VIDEO_720x576p_50Hz_4_3	17#define HDMI_EDID_EX_VIDEO_720x576p_50Hz_16_9	18#define HDMI_EDID_EX_VIDEO_1280x720p_50Hz_16_9	19#define HDMI_EDID_EX_VIDEO_1920x1080i_50Hz_16_9	20#define HDMI_EDID_EX_VIDEO_720x576i_50Hz_4_3	21#define HDMI_EDID_EX_VIDEO_720x576i_50Hz_16_9	22#define HDMI_EDID_EX_VIDEO_720x288p_50Hz_4_3	23#define HDMI_EDID_EX_VIDEO_720x288p_50Hz_16_9	24#define HDMI_EDID_EX_VIDEO_2880x576i_50Hz_4_3	25#define HDMI_EDID_EX_VIDEO_2880x576i_50Hz_16_9	26#define HDMI_EDID_EX_VIDEO_2880x288p_50Hz_4_3	27#define HDMI_EDID_EX_VIDEO_2880x288p_50Hz_16_9	28#define HDMI_EDID_EX_VIDEO_1440x576p_50Hz_4_3	29#define HDMI_EDID_EX_VIDEO_1440x576p_50Hz_16_9	30#define HDMI_EDID_EX_VIDEO_1920x1080p_50Hz_16_9	31#define HDMI_EDID_EX_VIDEO_1920x1080p_24Hz_16_9	32#define HDMI_EDID_EX_VIDEO_1920x1080p_25Hz_16_9	33#define HDMI_EDID_EX_VIDEO_1920x1080p_30Hz_16_9	34#define OMAP_HDMI_TIMINGS_NB			37#if defined (CONFIG_MACH_LGE_CX2)#define OMAP_HDMI_TIMINGS_VESA_START		16#else#define OMAP_HDMI_TIMINGS_VESA_START		15#endif#ifdef __cplusplusextern "C" {#endifenum extension_edid_db {	DATABLOCK_AUDIO	= 1,	DATABLOCK_VIDEO	= 2,	DATABLOCK_VENDOR = 3,	DATABLOCK_SPEAKERS = 4,};struct img_edid {	bool pref;	int code;};struct image_format {	int length;	struct img_edid fmt[HDMI_IMG_FORMAT_MAX_LENGTH];};struct audio_edid {	int num_of_ch;	int format;};struct audio_format {	int length;	struct audio_edid fmt[HDMI_AUDIO_FORMAT_MAX_LENGTH];};struct latency {		int vid_latency;	int aud_latency;	int int_vid_latency;	int int_aud_latency;};struct deep_color {	bool bit_30;	bool bit_36;	int max_tmds_freq;};struct HDMI_EDID_DTD_VIDEO {	u16	pixel_clock;			u8	horiz_active;			u8	horiz_blanking;			u8	horiz_high;			u8	vert_active;			u8	vert_blanking;			u8	vert_high;			u8	horiz_sync_offset;		u8	horiz_sync_pulse;		u8	vert_sync_pulse;		u8	sync_pulse_high;		u8	horiz_image_size;		u8	vert_image_size;		u8	image_size_high;		u8	horiz_border;			u8	vert_border;			u8	misc_settings;		};struct HDMI_EDID_DTD_MONITOR {	u16	pixel_clock;			u8	_reserved1;			u8	block_type;			u8	_reserved2;			u8	min_vert_freq;			u8	max_vert_freq;			u8	min_horiz_freq;			u8	max_horiz_freq;			u8	pixel_clock_mhz;		u8	GTF[2];				u8	start_horiz_freq;		u8	C;				u8	M[2];				u8	K;				u8	J;			} __attribute__ ((packed));struct HDMI_EDID_DTD_TEXT {	u16	pixel_clock;			u8	_reserved1;			u8	block_type;			u8	_reserved2;			u8	text[13];		} __attribute__ ((packed));union HDMI_EDID_DTD {	struct HDMI_EDID_DTD_VIDEO	video;	struct HDMI_EDID_DTD_TEXT	monitor_name;	struct HDMI_EDID_DTD_TEXT	monitor_serial_number;	struct HDMI_EDID_DTD_TEXT	ascii;	struct HDMI_EDID_DTD_MONITOR	monitor_limits;} __attribute__ ((packed));struct HDMI_EDID {	u8	header[8];			u16	manufacturerID;			u16	product_id;			u32	serial_number;			u8	week_manufactured;		u8	year_manufactured;		u8	edid_version;			u8	edid_revision;			u8	video_in_definition;		u8	max_horiz_image_size;		u8	max_vert_image_size;		u8	display_gamma;			u8	power_features;			u8	chroma_info[10];		u8	timing_1;			u8	timing_2;			u8	timing_3;			u8	std_timings[16];		union HDMI_EDID_DTD DTD[4];		u8	extension_edid;			u8	checksum;			u8	extension_tag;			u8	extention_rev;			u8	offset_dtd;			u8	num_dtd;			u8	data_block[123];		u8	extension_checksum;		u8	ext_datablock[256];} __attribute__ ((packed));int get_edid_timing_info(union HDMI_EDID_DTD *edid_dtd,			struct omap_video_timings *timings);void get_eedid_timing_info(int current_descriptor_addrs, u8 *edid ,			struct omap_video_timings *timings);int hdmi_get_datablock_offset(u8 *edid, enum extension_edid_db datablock,								int *offset);int hdmi_get_image_format(u8 *edid, struct image_format *format);int hdmi_get_audio_format(u8 *edid, struct audio_format *format);bool hdmi_has_ieee_id(u8 *edid);int hdmi_get_video_svds(u8 *edid, int *offset, int *length);void hdmi_get_av_delay(u8 *edid, struct latency *lat);void hdmi_deep_color_support_info(u8 *edid, struct deep_color *format);int hdmi_tv_yuv_supported(u8 *edid);bool hdmi_s3d_supported(u8 *edid);bool hdmi_ai_supported(u8 *edid);const struct omap_video_timings *hdmi_get_omap_timing(int ix);#ifdef __cplusplus};#endif#endif